- suggestion_sets.each do |suggestion_set|
  - suggestions = suggestion_set.suggestions
  .clear
  = suggestion_set_hr(suggestion_set)
  .suggestions_table{"data-show-slug" => suggestion_set.slug}
    - group_count = suggestions.map { |s| s.cluster_id }.uniq.reject { |s| s == nil }.count + suggestions.count { |s| s.cluster_id == nil }
    .total=t(:titles, :scope => [:views, :suggestion, :_cluster_set], :count => suggestions.count) + t(:groups, :scope => [:views, :suggestion, :_cluster_set], :count => group_count)
    %table.sortable
      %thead
        %tr
          %th.votes.header{:colspan => 2}=t('views.suggestion._table_set.Votes')
          %th.header= t('views.suggestion._table_set.Title')
          %th.header= t('views.suggestion._table_set.User')
          %th.header= t('views.suggestion._table_set.When')
      %tbody
        - suggestions.each do |suggestion|
          - if suggestion.in_cluster?
            - if suggestion.top_of_cluster?
              %tr{:class => "cluster-top", :id => "cluster-#{suggestion.cluster_id}", "data-expansion-state" => "closed", "data-sg-id" => suggestion.id}
                = haml :'suggestion/_cluster_table_row', :locals => {suggestion: suggestion, cluster_top: true}
              - suggestion.cluster.suggestions.each do |child_suggestion|
                - if child_suggestion.id != suggestion.id
                  %tr{:class => "expand-child child-cluster-#{child_suggestion.cluster_id}", "data-sg-id" => child_suggestion.id}
                    = haml :'suggestion/_cluster_table_row', :locals => {suggestion: child_suggestion, cluster_top: false}
          - else
            %tr{"data-sg-id" => suggestion.id}
              = haml :'suggestion/_cluster_table_row', :locals => {suggestion: suggestion, cluster_top: true}
